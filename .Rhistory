stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
slidify('index.Rmd')
spList<-sAICfun("biomassY3", species, germany)
spList
redund<-getRedundancy(vars, species, germany)
#plot the num. functions by fraction of the species pool needed
posCurve<-divNeeded(redund, type="positive")
posCurve$div<-posCurve$div/ncol(redund)
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("boxplot"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .04))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
negCurve<-divNeeded(redund, type="negative")
negCurve$div<-negCurve$div/ncol(redund)
nc<-qplot(nfunc, div, data=negCurve, group=nfunc, geom=c("boxplot"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .04))+
ylab("Fraction of Species Pool\nwith Negative Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
#combine these into one plot
grid.arrange(pc+annotate("text", x=1, y=1, label="a)"), nc+annotate("text", x=1, y=1, label="b)"), ncol=2)
redund<-getRedundancy(vars, species, germany)
posCurve<-divNeeded(redund, type="positive")
posCurve$div<-posCurve$div/ncol(redund)
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("boxplot"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .04))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
pc
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("jitter"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .06))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
pc
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("none"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
pc
qplot(nfunc, div, data=posCurve, group=nfunc, geom=c(NULL))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
qplot(nfunc, div, data=posCurve, group=nfunc, geom=c(NA))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
qplot(nfunc, div, data=posCurve, group=nfunc,  alpha=I(0))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
qplot(nfunc, div, data=posCurve, group=nfunc,  alpha=I(0))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .05))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
germanyThresh<-getFuncsMaxed(germany, vars, threshmin=0.05, threshmax=0.99, prepend=c("plot","Diversity"), maxN=7)
gcPlot<-subset(germanyThresh, germanyThresh$thresholds==0.8)
gcPlot$percent<-paste(100*gcPlot$thresholds, "%", sep="")
qplot(Diversity, funcMaxed, data=gcPlot, size=I(3)) +
stat_smooth(method="glm", family=quasipoisson(link="identity"), colour="red", lwd=1.2) +
ylab(expression("Number of Functions" >= Threshold)) +
xlab("Species Richness") +
theme_bw(base_size=22) +
geom_text(data=data.frame(percent = unique(gcPlot$percent),
lab = paste(letters[1:4], ")", sep=""),
Diversity=2,
funcMaxed=6
), mapping=aes(x=Diversity, y=funcMaxed, label=lab))
slidify("index.Rmd")
slidify("index.Rmd")
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-0.02, y=Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Porportion of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(0.4,1)) +
ylim(c(0,1))
indexTable
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde)
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-0.02, y=Mmax/nFunc+0.035, label=location), size=I(5))
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-0.02, y=Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Porportion of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,1))
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-2, y=Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Porportion of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,1))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
version(slidify)
?library
library(slidify)
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(slidify)
library(slidifyLibraries)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
germanLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=germanyThresh[which(germanyThresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(0.5,1.5,3.7), label=c("Tmax", "Tmde", "Tmin"), size=8) +
annotate(geom="text", x=16.75, y=c(germanIDX$Mmin, germanIDX$Mmax, germanIDX$Mmde), label=c("Mmin", "Mmax", "Mmde"), size=7)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
slidify('index.Rmd')
slopePlot
slopePlot<-ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(fill="grey50", aes( x=thresholds*100,ymin=Estimate-2*bdLinearSlopes[["Std. Error"]],
ymax=Estimate+2*bdLinearSlopes[["Std. Error"]])) +
geom_point(aes(x=thresholds*100, y=Estimate), size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
bdLinearSlopes<-getCoefTab(funcMaxed ~ Diversity, data=bdThreshes, groupVar=c("location", "thresholds"),
coefVar="Diversity", family=quasipoisson(link="identity"), control=list(maxit=800))
bdThreshes<-ddply(sub_biodepth, .(location), function(x) getFuncsMaxed(x, vars=allVars, prepend=c("plot","Diversity"), maxN=8))
sub_biodepth<-ddply(all_biodepth, .(location), function(adf){
adf$light3<- -1*adf$light3+max(adf$light3, na.rm=T)
adf$N.Soil<- -1*adf$N.Soil +max(adf$N.Soil, na.rm=T)
adf
})
sub_biodepth
#get thresholds
bdThreshes<-ddply(sub_biodepth, .(location), function(x) getFuncsMaxed(x, vars=allVars, prepend=c("plot","Diversity"), maxN=8))
####look at slopes
#note, maxIT argument is due to some fits needing more iterations to converge
bdLinearSlopes<-getCoefTab(funcMaxed ~ Diversity, data=bdThreshes, groupVar=c("location", "thresholds"),
coefVar="Diversity", family=quasipoisson(link="identity"), control=list(maxit=800))
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable <- ldply(indexTable)
indexTable$Mmin[which(is.na(indexTable$Mmin))]<-indexTable$nFunc[which(is.na(indexTable$Mmin))]
indexTable$Tmin[which(is.na(indexTable$Tmin))]<-0
indexTable$Mmin <- round(indexTable$Mmin)
#figure
slopePlot<-ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(fill="grey50", aes( x=thresholds*100,ymin=Estimate-2*bdLinearSlopes[["Std. Error"]],
ymax=Estimate+2*bdLinearSlopes[["Std. Error"]])) +
geom_point(aes(x=thresholds*100, y=Estimate), size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
slopePlot
####
# Now we will look at the entire BIODEPTH dataset
#
# Note the use of ddply from plyr to generate the new data frame using all locations from biodepth.
# If you're not using plyr for your data aggregation, you should be.  http://plyr.had.co.nz/
# It will save you a lot of time and headaches in the future.
####
#Read in data  to run sample analyses on the biodepth data
allVars<-qw(biomassY3, root3, N.g.m2,  light3, N.Soil, wood3, cotton3)
varIdx<-which(names(sub_biodepth) %in% allVars)
#re-normalize so that everything is on the same sign-scale (e.g. the maximum level of a function is the "best" function)
sub_biodepth<-ddply(all_biodepth, .(location), function(adf){
adf$light3<- -1*adf$light3+max(adf$light3, na.rm=T)
adf$N.Soil<- -1*adf$N.Soil +max(adf$N.Soil, na.rm=T)
adf
})
#get thresholds
bdThreshes<-ddply(sub_biodepth, .(location), function(x) getFuncsMaxed(x, vars=allVars, prepend=c("plot","Diversity"), maxN=8))
?options
options(warn=2)
#re-normalize so that everything is on the same sign-scale (e.g. the maximum level of a function is the "best" function)
sub_biodepth<-ddply(all_biodepth, .(location), function(adf){
adf$light3<- -1*adf$light3+max(adf$light3, na.rm=T)
adf$N.Soil<- -1*adf$N.Soil +max(adf$N.Soil, na.rm=T)
adf
})
slidify('index.Rmd')
slidify('index.Rmd')
bdLinearSlopes$thresh
bdLinearSlopes$thresholds
bdLinearSlopes$Estimate
names(bdLinearSlopes)
dput(names(bdLinearSlopes))
names(bdLinearSlopes) <- c("location", "thresholds", "Estimate", "StdError", "tvalue", "p")
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(fill="grey50", aes(x=thresholds*100,ymin=Estimate-1.96*StdError,ymax=Estimate+1.96*)) +
geom_point(aes(x=thresholds*100, y=Estimate), size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
bdLinearSlopes$thresholds <- bdLinearSlopes$thresholds*100
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(fill="grey50", aes(x=thresholds,ymin=Estimate-1.96*StdError,ymax=Estimate+1.96*)) +
geom_point(aes(x=thresholds, y=Estimate), size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
class(bdLinearSlopes$thresholds)
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(fill="grey50", aes(x=thresholds,ymin=Estimate-1.96*StdError,ymax=Estimate+1.96*))
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate))
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(fill="grey50", aes(x=thresholds,ymin=Estimate-1.96*StdError,ymax=Estimate+1.96*))
?geom_ribbon
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(aes(x=thresholds,
ymin=Estimate-1.96*StdError,
ymax=Estimate+1.96*), fill="grey50")
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +geom_point()
class(bdLinearSlopes$Estimate)
ggplot(bdLinearSlopes, aes(x=thresholds, y=Estimate)) +geom_point()
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +geom_point()
bdLinearSlopes$Estimate
which(is.na(bdLinearSlopes$Estimate))
bdLinearSlopes <- bdLinearSlopes[-which(is.na(bdLinearSlopes$Estimate)),]
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +geom_point()
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(aes(x=thresholds,
ymin=Estimate-1.96*StdError,
ymax=Estimate+1.96*), fill="grey50")
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(mapping= aes(x=thresholds,
ymin=Estimate-1.96*StdError,
ymax=Estimate+1.96*StdError), fill="grey50")
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(mapping= aes(x=thresholds,
ymin=Estimate-1.96*StdError,
ymax=Estimate+1.96*StdError), fill="grey50") +
geom_point(aes(x=thresholds, y=Estimate), size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable <- ldply(indexTable)
indexTable$Mmin[which(is.na(indexTable$Mmin))]<-indexTable$nFunc[which(is.na(indexTable$Mmin))]
indexTable$Tmin[which(is.na(indexTable$Tmin))]<-0
indexTable$Mmin <- round(indexTable$Mmin)
indexTable$Tmde=indexTable$Tmde*100
indexTable$Tmax=indexTable$Tmax*100
indexTable$Tmin=indexTable$Tmin*100
indexTable
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable <- ldply(indexTable)
bdLinearSlopes$location
allVars<-qw(biomassY3, root3, N.g.m2,  light3, N.Soil, wood3, cotton3)
varIdx<-which(names(sub_biodepth) %in% allVars)
#re-normalize so that everything is on the same sign-scale (e.g. the maximum level of a function is the "best" function)
sub_biodepth<-ddply(all_biodepth, .(location), function(adf){
adf$light3<- -1*adf$light3+max(adf$light3, na.rm=T)
adf$N.Soil<- -1*adf$N.Soil +max(adf$N.Soil, na.rm=T)
adf
})
#get thresholds
bdThreshes<-ddply(sub_biodepth, .(location), function(x) getFuncsMaxed(x, vars=allVars, prepend=c("plot","Diversity"), maxN=8))
####look at slopes
#note, maxIT argument is due to some fits needing more iterations to converge
bdLinearSlopes<-getCoefTab(funcMaxed ~ Diversity, data=bdThreshes, groupVar=c("location", "thresholds"),
coefVar="Diversity", family=quasipoisson(link="identity"), control=list(maxit=800))
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable <- ldply(indexTable)
indexTable
indexTable$Mmin[which(is.na(indexTable$Mmin))]<-indexTable$nFunc[which(is.na(indexTable$Mmin))]
indexTable$Tmin[which(is.na(indexTable$Tmin))]<-0
indexTable$Mmin <- round(indexTable$Mmin)
indexTable$Tmde=indexTable$Tmde*100
indexTable$Tmax=indexTable$Tmax*100
indexTable$Tmin=indexTable$Tmin*100
#figure
names(bdLinearSlopes) <- c("location", "thresholds", "Estimate", "StdError", "tvalue", "p")
bdLinearSlopes$thresholds <- bdLinearSlopes$thresholds*100
bdLinearSlopes <- bdLinearSlopes[-which(is.na(bdLinearSlopes$Estimate)),]
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(mapping= aes(x=thresholds,
ymin=Estimate-1.96*StdError,
ymax=Estimate+1.96*StdError), fill="grey50") +
geom_point(size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Percentage of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,1))
indexTable
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde)
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+0.035, label=location), size=I(5))
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+0.35, label=location), size=I(5))
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+3.5, label=location), size=I(5))
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+3, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Percentage of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,110))
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+4, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Percentage of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,110))
colci <- function(atab){
ldply(apply(atab,2,function(x) mean_cl_boot(x)))
}
indexTable2 <- indexTable[,-10]
indexTable2$Mmin <- indexTable$Mmin/indexTable$nFunc*100
indexTable2$Mmax <- indexTable$Mmax/indexTable$nFunc*100
indexTable2$Mmde <- indexTable$Mmde/indexTable$nFunc*100
indexTable2 <- data.frame(Mean=colMeans(indexTable2[,-1]),
lower.CI = colci(indexTable2[,-1])[,3],
upper.CI = colci(indexTable2[,-1])[,4])
indexTable2$metric <- rownames(indexTable2)
indexSummary <- indexTable2[c(3:2,8:7),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Percentage\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
indexTable2
indexTable2 <- indexTable[,-10]
indexTable2$Mmin <- indexTable$Mmin/indexTable$nFunc*100
indexTable2$Mmax <- indexTable$Mmax/indexTable$nFunc*100
indexTable2$Mmde <- indexTable$Mmde/indexTable$nFunc*100
indexTable2$Pmde.linear <- indexTable$Pmde.linear*100
indexTable2 <- data.frame(Mean=colMeans(indexTable2[,-1]),
lower.CI = colci(indexTable2[,-1])[,3],
upper.CI = colci(indexTable2[,-1])[,4])
indexTable2$metric <- rownames(indexTable2)
indexTable2$metric
indexSummary <- indexTable2[c(3:2,8:7),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Percentage\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,100))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
pc
slidify('index.Rmd')
slidify('index.Rmd')
germanLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=germanyThresh[which(germanyThresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(0.5,2,4.5), label=c("Tmax", "Tmde", "Tmin"), size=8) +
annotate(geom="text", x=16.75, y=c(germanIDX$Mmin, germanIDX$Mmax, germanIDX$Mmde), label=c("Mmin", "Mmax", "Mmde"), size=7)
germanLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=germanyThresh[which(germanyThresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(0.2,2,4.7), label=c("Tmax", "Tmde", "Tmin"), size=8) +
annotate(geom="text", x=16.75, y=c(germanIDX$Mmin, germanIDX$Mmax, germanIDX$Mmde), label=c("Mmin", "Mmax", "Mmde"), size=7)
slidify('index.Rmd')
publish("jebyrnes", "intecol-multifunc")
publish("jebyrnes", "intecol-multifunc")
slidify('index.Rmd')
slidify('index.Rmd')
publish("jebyrnes", "intecol-multifunc")
?all_biodepth
