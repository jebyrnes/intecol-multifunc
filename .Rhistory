ylim(c(0,1))
indexSummary
grep("mde", indexSummary$Type)
indexSummary
grep("mde", indexSummary$metric)
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
indexTable2 <- indexTable[,-10]
indexTable2$Mmin <- indexTable$Mmin/indexTable$nFunc
indexTable2$Mmax <- indexTable$Mmax/indexTable$nFunc
indexTable2$Mmde <- indexTable$Mmde/indexTable$nFunc
indexSummary <- data.frame(Mean=colMeans(indexTable2[,-1]),
lower.CI = colci(indexTable2[,-1])[,3],
upper.CI = colci(indexTable2[,-1])[,4])
indexSummary$metric <- rownames(indexSummary)
indexSummary <- indexSummary[c(3:2,8:7,5),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Value\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
?SSmm
?nls
MM
MM1
SSmm
?SSlogis
head(germany)
getCoefTab
germany$funcMaxed
getFuncsMaxed
germanyThresh
head(germanyThresh)
subset(germanyThresh, germanyThresh$thresh==0.65)
mmModel <- nls(rate~Vm*Diversity/(K+Diversity),
start=list(Vm=max(adf$funcMaxed), K=4),
data=subset(germanyThresh, germanyThresh$thresh==0.65))
mmModel <- nls(rate~Vm*Diversity/(K+Diversity),
start=list(Vm=max(germanyThresh$funcMaxed), K=4),
data=subset(germanyThresh, germanyThresh$thresh==0.65))
max(germanyThresh$funcMaxed)
mmModel <- nls(rate~Vm*Diversity/(K+Diversity),
data=subset(germanyThresh, germanyThresh$thresh==0.65),
start=list(Vm=5, K=4)
)
mmModel <- nls(funcMaxed~Vm*Diversity/(K+Diversity),
data=subset(germanyThresh, germanyThresh$thresh==0.65),
start=list(Vm=5, K=4)
)
mmModel <- nls(funcMaxed~Vm*Diversity/(K+Diversity),
data=subset(germanyThresh, germanyThresh$thresh==0.65),
start=list(Vm=5, K=4)
)
coef(mmModel)
mmCoef <- function(adf){
coef(nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=max(adf$funcMaxed), K=5),
data=adf))
}
mmGermany <- ddply(germanyThresh, "thresh", mmCoef)
mmGermany
plot(k~thresh, data=mmGermany)
plot(K~thresh, data=mmGermany)
mmModel
profile(mmModel)
summary(mmModel)
coef(summary(mmModel))
coef(summary(mmModel))[,2]
coef(mmModel)
mmCoef <- function(adf){
mod <- nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=max(adf$funcMaxed), K=5),
data=adf)
out <- cbind(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
}
mmGermany <- ddply(germanyThresh, "thresh", mmCoef)
mmGermany
mmCoef <- function(adf){
mod <- nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=max(adf$funcMaxed), K=5),
data=adf)
out <- data.frame(cbind(coef(mod), coef(summary(mod))[,2]))
names(out) <- c("Vm", "K", "se.Vm", "se.K")
}
mmGermany <- ddply(germanyThresh, "thresh", mmCoef)
mod <- mmModel
out <- data.frame(cbind(coef(mod), coef(summary(mod))[,2]))
out
coef(mod)
coef(summary(mod))[,2]
cbind(coef(mod), coef(summary(mod))[,2])
out <- data.frame(rbind(coef(mod), coef(summary(mod))[,2]))
out
out <- data.frame(c(coef(mod), coef(summary(mod))[,2]))
out
c(coef(mod), coef(summary(mod))[,2])
out <- c(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
out
mmCoef <- function(adf){
mod <- nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=max(adf$funcMaxed), K=5),
data=adf)
out <- c(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
}
mmGermany <- ddply(germanyThresh, "thresh", mmCoef)
mmGermany
out <- c(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
out
mmCoef <- function(adf){
mod <- nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=max(adf$funcMaxed), K=5),
data=adf)
out <- c(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
out
}
mmGermany <- ddply(germanyThresh, "thresh", mmCoef)
mmGermany
ggplot(mmGermany, aes(x=thresh, y=K, ymin=K-2*se.K, ymax=K+2*se.K)) +
geom_point() +
geom_ribbon(fill=grey50)
ggplot(mmGermany, aes(x=thresh, y=K, ymin=K-2*se.K, ymax=K+2*se.K)) +
geom_point() +
geom_ribbon(fill="grey50")
ggplot(mmGermany, aes(x=thresh, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
geom_ribbon(fill="grey50") +
geom_point()
ggplot(mmGermany, aes(x=thresh, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw()
ggplot(mmGermany, aes(x=thresh, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2)
mod
summary(mod)
ggplot(mmGermany, aes(x=thresh, y=Vm, ymin=K-1.96*se.Vm, ymax=K+1.96*se.Vm)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2)
ggplot(mmGermany, aes(x=thresh, y=Vm, ymin=Vm-1.96*se.Vm, ymax=Vm+1.96*se.Vm)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2)
profile(mod)
head(bdThreshes)
mmBD <- ddply(bdThreshes,c("location", "thresholds"), mmCoef)
mmCoef <- function(adf){
mod <- nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=1, K=5),
data=adf)
out <- c(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
out
}
mmGermany <- ddply(germanyThresh, "thresh", mmCoef)
mmBD <- ddply(bdThreshes,c("location", "thresholds"), mmCoef)
getCoefTab
mmCoef <- function(adf){
options(warn=2)
mod <- try(nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=1, K=5),
data=adf))
options(warn=0)
#if there was a problem, catch it and just return NAs for this coefficient
if("try-error" %in% class(aFit)) return(rep(NA, 4))
out <- c(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
out
}
mmBD <- ddply(bdThreshes,c("location", "thresholds"), mmCoef)
mmCoef <- function(adf){
options(warn=2)
mod <- try(nls(funcMaxed~Vm*Diversity/(K+Diversity), start=list(Vm=1, K=5),
data=adf))
options(warn=0)
#if there was a problem, catch it and just return NAs for this coefficient
if("try-error" %in% class(mod)) return(rep(NA, 4))
out <- c(coef(mod), coef(summary(mod))[,2])
names(out) <- c("Vm", "K", "se.Vm", "se.K")
out
}
mmBD <- ddply(bdThreshes,c("location", "thresholds"), mmCoef)
mmBD
ggplot(mmBD, aes(x=thresholds, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~location)
ggplot(mmBD, aes(x=thresholds, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~location) +
ylim(c(-1,32))
ggplot(mmBD, aes(x=thresholds, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~location) +
ylim(c(-1,52))
ggplot(mmBD, aes(x=thresholds, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~location) +
ylim(c(-1,5))
ggplot(mmBD, aes(x=thresholds, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
#geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~location) +
# ylim(c(-1,5))
facet_wrap(~location) #+
ggplot(mmBD, aes(x=thresholds, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
#geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~location) #+
# ylim(c(-1,5))
ggplot(mmBD, aes(x=thresholds, y=K, ymin=K-1.96*se.K, ymax=K+1.96*se.K)) +
#geom_ribbon(fill="grey50", alpha=0.8) +
geom_point() +
theme_bw() +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~location) +
ylim(c(-1,16))
?getCoefTab
?all_biodepth
?drc
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Value\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
indexTable2 <- indexTable[,-10]
indexTable2$Mmin <- indexTable$Mmin/indexTable$nFunc
indexTable2$Mmax <- indexTable$Mmax/indexTable$nFunc
indexTable2$Mmde <- indexTable$Mmde/indexTable$nFunc
indexTable2 <- data.frame(Mean=colMeans(indexTable2[,-1]),
lower.CI = colci(indexTable2[,-1])[,3],
upper.CI = colci(indexTable2[,-1])[,4])
indexTable2$metric <- rownames(indexTable2)
indexTable2
indexSummary <- indexTable2[c(3:2,8:7,6),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Value\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
indexSummary <- indexTable2[c(3:2,8:7,4),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Value\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
indexSummary
qplot(Tmax, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-0.02, y=Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Porportion of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(0.4,1)) +
ylim(c(0,1))
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Value\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
indexSummary <- indexTable2[c(3:2,8:7,5),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Value\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
indexSummary <- indexTable2[c(3:2,8:7),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=18) +
xlab("") +
ylab("Value\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,1))
slidify('index.Rmd')
spList<-sAICfun("biomassY3", species, germany)
spList
redund<-getRedundancy(vars, species, germany)
#plot the num. functions by fraction of the species pool needed
posCurve<-divNeeded(redund, type="positive")
posCurve$div<-posCurve$div/ncol(redund)
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("boxplot"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .04))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
negCurve<-divNeeded(redund, type="negative")
negCurve$div<-negCurve$div/ncol(redund)
nc<-qplot(nfunc, div, data=negCurve, group=nfunc, geom=c("boxplot"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .04))+
ylab("Fraction of Species Pool\nwith Negative Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
#combine these into one plot
grid.arrange(pc+annotate("text", x=1, y=1, label="a)"), nc+annotate("text", x=1, y=1, label="b)"), ncol=2)
redund<-getRedundancy(vars, species, germany)
posCurve<-divNeeded(redund, type="positive")
posCurve$div<-posCurve$div/ncol(redund)
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("boxplot"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .04))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
pc
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("jitter"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .06))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
pc
pc<-qplot(nfunc, div, data=posCurve, group=nfunc, geom=c("none"))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
pc
qplot(nfunc, div, data=posCurve, group=nfunc, geom=c(NULL))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
qplot(nfunc, div, data=posCurve, group=nfunc, geom=c(NA))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
qplot(nfunc, div, data=posCurve, group=nfunc,  alpha=I(0))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .3))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
qplot(nfunc, div, data=posCurve, group=nfunc,  alpha=I(0))+
geom_jitter(size=4, position = position_jitter(height=0.001, width = .05))+
ylab("Fraction of Species Pool\nwith Positive Effect\n")+
xlab("\nNumber of Functions")+theme_bw(base_size=24)+ylim(c(0,1))
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
germanyThresh<-getFuncsMaxed(germany, vars, threshmin=0.05, threshmax=0.99, prepend=c("plot","Diversity"), maxN=7)
gcPlot<-subset(germanyThresh, germanyThresh$thresholds==0.8)
gcPlot$percent<-paste(100*gcPlot$thresholds, "%", sep="")
qplot(Diversity, funcMaxed, data=gcPlot, size=I(3)) +
stat_smooth(method="glm", family=quasipoisson(link="identity"), colour="red", lwd=1.2) +
ylab(expression("Number of Functions" >= Threshold)) +
xlab("Species Richness") +
theme_bw(base_size=22) +
geom_text(data=data.frame(percent = unique(gcPlot$percent),
lab = paste(letters[1:4], ")", sep=""),
Diversity=2,
funcMaxed=6
), mapping=aes(x=Diversity, y=funcMaxed, label=lab))
slidify("index.Rmd")
slidify("index.Rmd")
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-0.02, y=Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Porportion of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(0.4,1)) +
ylim(c(0,1))
indexTable
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde)
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-0.02, y=Mmax/nFunc+0.035, label=location), size=I(5))
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-0.02, y=Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Porportion of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,1))
qplot(Tmax*100, Mmax/nFunc, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax*100-2, y=Mmax/nFunc+0.035, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=16) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Porportion of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,1))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
version(slidify)
?library
library(slidify)
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(slidify)
library(slidifyLibraries)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
germanLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=germanyThresh[which(germanyThresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(0.5,1.5,3.7), label=c("Tmax", "Tmde", "Tmin"), size=8) +
annotate(geom="text", x=16.75, y=c(germanIDX$Mmin, germanIDX$Mmax, germanIDX$Mmde), label=c("Mmin", "Mmax", "Mmde"), size=7)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
